generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Design reduction to keep user lightweight. All the user has is the mappings of their id to an event option ID.
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  notification Boolean  @default(true)
  password     String
  createdAt    DateTime @default(now())

  watchlist WatchedEvent[]
}

/// For persistent watchlist data. Maps a userId to an event option (NOT AN EVENT LOL).
model WatchedEvent {
  userId          Int
  eventInstanceId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventInstance   EventInstance @relation(fields: [eventInstanceId], references: [ticketMasterId], onDelete: Cascade)

  @@id([userId, eventInstanceId])
}


/// For storing TM, SH, SG prices for a single event option
model PriceOption {
  id              String            @id @default(uuid()) // Let this randomly generate for primary key reference... DO NOT CHANGE ME - Jayce
  eventInstanceId String
  price           Float
  source          String
  url             String?
  specificEvent EventInstance @relation(fields: [eventInstanceId], references: [ticketMasterId], onDelete: Cascade)

  @@unique([eventInstanceId, source])
}

/// Holds the actual data for the event. I do not know how I'm feelin about the PriceOptions schema yet but it seems intuitive.
model EventInstance {
  ticketMasterId String    @id // ABSOLUTELY REQUIRED!!!! MUST REFER TO TM ID. We can add other options like this later.
  eventName      String
  venueName      String
  address        String
  seatMapSrc     String?
  city           String
  country        String
  url            String?
  coverImage     String?
  currency       String?
  startTime      DateTime
  saleStart      DateTime?
  saleEnd        DateTime?

  event        EventMetaData  @relation(fields: [eventName], references: [eventName], onDelete: Cascade)
  watchers     WatchedEvent[]
  priceOptions PriceOption[]
}

model EventMetaData {
  eventName     String  @id @unique
  genre         String?
  coverImage    String?
  instanceCount Int

  requestLogs RequestLogEvent[]
  instances   EventInstance[]
}

model RequestLog {
  id             String   @id @default(uuid())
  endpoint       String
  queryParams    String   @unique
  statusCode     Int
  responseTimeMs Int
  createdAt      DateTime @default(now())
  hits           Int      @default(1)

  events RequestLogEvent[]
}

model RequestLogEvent {
  id           String @id @default(uuid())
  requestLogId String
  eventName    String

  requestLog RequestLog    @relation(fields: [requestLogId], references: [id], onDelete: Cascade)
  event      EventMetaData @relation(fields: [eventName], references: [eventName], onDelete: Cascade)

  @@unique([requestLogId, eventName])
}
